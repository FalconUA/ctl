#include "ctlfac.hpp"
#include "typespec.hpp"

namespace mp {

	#define __TRIVIAL_FACTORIZATION__ \
		T N = n;                      \
		if (N == 1){                  \
			r1 = 1, r2 = 1;           \
			return;                   \
		}                             \
		if (N % 2 == 0){              \
			N = N/2; r1 = 2; r2 = N;  \
			return ;                  \
		}                             \
		if (!(algo.isprime == NULL))  \
			if (algo.isprime(N)){     \
				r1 = N, r2 = 1;       \
				return;               \
			}

	template <typename T>
	void fac_pollard(T const& n, T& r1, T& r2, TypeSpecifications<T> const& algo)
	{
		__TRIVIAL_FACTORIZATION__

		auto G = [&n](T x) -> T {return (x * x + 1) % n;};

		T x = 2, y = 2, d = 1;
		while (d == 1){
			x = G(x);
			y = G(G(y));
			d = algo.gcd(algo.abs(x - y), n);
		}
		if (d == n){
			r1 = 0;
			r2 = 0;
			return ;
		}	
		r1 = d;
		r2 = n/d;
		return ;
	}

	#undef __TRIVIAL_FACTORIZATION__

}
